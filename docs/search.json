[
  {
    "objectID": "about.html#why-build-this",
    "href": "about.html#why-build-this",
    "title": "About This Project",
    "section": "Why build this?",
    "text": "Why build this?\n\nHear a lot from community orgs that they need the same data\nCode makes it free, reproducible, and sustainable"
  },
  {
    "objectID": "about.html#how-did-we-do-this",
    "href": "about.html#how-did-we-do-this",
    "title": "About This Project",
    "section": "How did we do this?",
    "text": "How did we do this?\nEverything that you see on this website is available for free.\nThis project was built to be copied; we hope it inspires you to do similar work. Please feel free to fork the repository, or consider submitting a pull request to improve the project."
  },
  {
    "objectID": "about.html#who-are-we",
    "href": "about.html#who-are-we",
    "title": "About This Project",
    "section": "Who are we?",
    "text": "Who are we?\nGroup of planning students at Penn"
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "All the data used in this project are publicly available. They are drawn from two primary sources: the American Community Survey, and the City of Philadelphia.\nThe City of Philadelphia makes most of its data available on Open Data Philly. Other sources are available through the City’s ArcGIS REST API, and still others through the City’s SQL Database."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Reports for Philly RCOs",
    "section": "",
    "text": "Welcome to the website!\nThe plan is to make this page interactive, with a full downloadable report for every RCO in the city."
  },
  {
    "objectID": "index.html#what-is-this",
    "href": "index.html#what-is-this",
    "title": "Data Reports for Philly RCOs",
    "section": "What is this?",
    "text": "What is this?\nThis Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at https://quarto.org/docs/interactive/shiny/.\nDownload this button"
  },
  {
    "objectID": "index.html#find-my-organization",
    "href": "index.html#find-my-organization",
    "title": "Data Reports for Philly RCOs",
    "section": "Find My Organization",
    "text": "Find My Organization\n\n\nShow code\n# here, we'll execute all of our data imports and manipulation\n\n\nlibrary(tigris, quietly = T)\nlibrary(tidyverse, quietly = T)\nlibrary(sf, quietly = T)\nlibrary(mapview, quietly = T)\nlibrary(acs, quietly = T)\nlibrary(tidycensus, quietly = T)\nlibrary(gtools, quietly = T) #for smartbind\nlibrary(janitor) #to clean dirty excel files\nlibrary(stringr)\nlibrary(rphl)\nlibrary(plotly) # to make graphcs interactive\nlibrary(ggthemr)\nlibrary(tmap)\nlibrary(ggiraph) # to make graphs interactive\nlibrary(downloadthis)\nlibrary(RColorBrewer)\nlibrary(scales)\nlibrary(tigris)\nlibrary(monochromeR)\nlibrary(verbaliseR)\nlibrary(flexdashboard)\n\ntmap_options(basemaps = \"Esri.WorldGrayCanvas\") #set global tmap basemap\n\ntmap_mode('view')\n\nggthemr(\"pale\") #set global ggplot theme\n\noptions(tigris_use_cache = TRUE)\n\n# define crs to be used globally\ncrs = \"epsg:2272\" # local us feet crs\n\nchoro_pal = rev(generate_palette(\"#C45B4D\", modification = \"go_lighter\", n_colours = 5, view_palette = FALSE)) # create palette for choropleth map\n\nblk_choro_pal = rev(generate_palette(\"#444444\", modification = \"go_lighter\", n_colours = 5, view_palette = FALSE)) # create palette for choropleth map\n\nmap_pal = c(\"#3262AB\", \"#C45B4D\",\"#444444\")\n\nstatus_pal = c(\"Open\" = \"#C45B4D\",\n                \"Closed\" = \"#444444\")\n\nblue = generate_palette(\"#3262AB\", modification = \"go_lighter\", n_colours = 4, view_palette = FALSE)\n\ngreen = generate_palette(\"#41a65c\", modification = \"go_lighter\", n_colours = 4, view_palette = FALSE)\n\nred = generate_palette(\"#FF8D7D\", modification = \"go_lighter\", n_colours = 4, view_palette = FALSE)\n\nmap_pal_plus = paste(c(blue[1], blue[3], green[1], green[3], red[1], red[3]))\n\n# define color palette\nwoodland_palette_full = c('#231f20',\n                                   '#1c3c4a',\n                                   '#344a2f',\n                                   '#886ea9',\n                                   '#e02c2d',\n                                   '#ffb400',\n                                   '#d2e6ee',\n                                   '#efefef',\n                                   '#e4eee6',\n                                   '#e8e8e8',\n                                   '#ecdace',\n                                   '#fff3d6',\n                                   '#9bc6d9',\n                                   '#c2c2c2',\n                                   '#a9aa7e',\n                                   '#d5cce1',\n                                   '#c79191',\n                                   '#ffe099'\n)\n\n# define color palette\nwoodland_palette_dark = c('#231f20',\n                                   '#1c3c4a',\n                                   '#344a2f',\n                                   '#886ea9',\n                                   '#e02c2d',\n                                   '#ffb400'\n)\n\n# define color palette\nwoodland_palette_light = c('#d2e6ee',\n                                    '#efefef',\n                                    '#e4eee6',\n                                    '#e8e8e8',\n                                    '#ecdace',\n                                    '#fff3d6',\n                                    '#9bc6d9',\n                                    '#c2c2c2',\n                                    '#a9aa7e',\n                                    '#d5cce1',\n                                    '#c79191',\n                                    '#ffe099'\n)\n\npz = st_read(\"C:/Users/Nissim/Documents/Building Permits for Dante/west_phl_building_permits/west_phl_building_permits/Philadelphia_Promise_Zone.shp\") |>\n        st_transform(crs = st_crs(crs))\n\n\nReading layer `Philadelphia_Promise_Zone' from data source \n  `C:\\Users\\Nissim\\Documents\\Building Permits for Dante\\west_phl_building_permits\\west_phl_building_permits\\Philadelphia_Promise_Zone.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: -75.21749 ymin: 39.95309 xmax: -75.17996 ymax: 39.97527\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nShow code\n# import phl tracts; pull woodland ave tracts only\nwoodland_tracts = tracts('PA', 'Philadelphia') |>\n  filter(NAME %in% c(66, 63)) |>\n  st_transform(crs = st_crs(\"EPSG:2272\")) # project to PA South NAD 1983 US Ft\n\n### structure:\n\n# 1. import data\n# 2. import pz boundaries\n# 3. adjust to pz (clip, inter/extra-polate)\n# 4. df(s) ready to go for viz\n\n\n### 1. import data\n\n# vital stats from ODP\n# crime via SQL API\n# high quality childcare from here: https://www.childcaremap.org/newmaps#/ (or maybe ODP)\n\n### 2. import pz boundaries\n\nphl_demos <- get_acs(geography = \"tract\", # What is the lowest level of geography are we interested in?\n                     year = 2020, # What year do we want - this can also be used for 2000 census data\n                     variables = c(\n                       #Population\n                       \"B01003_001E\", #Total population\n                       \"B11001_001E\", #Total number of households\n                       \"B09001_001E\", #Total population under 18\n                       \"B09021_022\", #Estimate!!Total:!!65 years and over:\n                       \"B01002_001\", #Estimate!!Median age --!!Total:\n                       \n                       \n                       #Race\n                       \"B02001_002E\", #Total white population\n                       \"B02001_003E\", #Total Black population\n                       \"B02001_004E\", #American Indian and Alaska Native alone\n                       \"B02001_005E\", #Total Asian population\n                       \"B02001_006E\", #Native Hawaiian and Other Pacific Islander alone\n                       \"B02001_007E\", #Some other race alone\n                       \"B02001_008E\", #Two or more races\n                       \n                       #Ethnicitiy\n                       \"B01001I_001E\", #Total: Hispanic or Latino (distinct from race)\n                       \n                       #Health\n                        #no health care\n                       \"B27010_017E\", #Estimate!!Total:!!Under 19 years:!!No health insurance coverage\n                       \"B27010_033E\", #Estimate!!Total:!!19 to 34 years:!!No health insurance coverage\n                       \"B27010_050E\", #Estimate!!Total:!!35 to 64 years:!!No health insurance coverage\n                       \"B27010_066E\", #Estimate!!Total:!!65 years and over:!!No health insurance coverage\n                       \n                        #public health care\n                       \"B18135_006E\", #Estimate!!Total:!!Under 19 years:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                       \"B18135_011E\", #Estimate!!Total:!!Under 19 years:!!No disability:!!With health insurance coverage:!!With public health coverage\n                       \"B18135_017E\", #Estimate!!Total:!!19 to 64 years:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                       \"B18135_022E\", #Estimate!!Total:!!19 to 64 years:!!No disability:!!With health insurance coverage:!!With public health coverage\n                       \"B18135_028E\", #Estimate!!Total:!!65 years and over:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                       \"B18135_033E\", #Estimate!!Total:!!65 years and over:!!No disability:!!With health insurance coverage:!!With public health coverage\n                       \n                        #snap\n                       \"B99221_001E\", #Estimate!!Total: SNAP recipients\n                       \n                       #Housing\n                       \"B25064_001E\", #Median gross rent\n                       \"B25070_007E\", #Rent 30.0 to 34.9 percent\n                       \"B25070_008E\", #Rent 35.0 to 39.9 percent\n                       \"B25070_009E\", #Rent 40.0 to 49.9 percent\n                       \"B25070_010E\", #Rent 50.0 percent or more\n                       \"B25003_002E\", #Owner occupied\n                       \"B25003_003E\", #Renter occupied\n                       \"B25001_001E\", #Number of residential units\n                       \"B25002_002E\", #Occupied\n                       \"B25002_003E\", #Vacant\n                       \"B25077_001E\", #Median house value (dollars)\n                       \n                       #Income & Work\n                       \"B19013_001E\", #Median household income\n                       \"B17001_002E\", #Income in the past 12 months below poverty level:\n                       \"B23025_003E\", #In labor force:!!Civilian labor force:\n                       \"B23025_004E\", #In labor force:!!Civilian labor force:!!Employed\n                       \"B23025_005E\", #In labor force:!!Civilian labor force:!!Unemployed\n                       \n                       #Education\n                       \"B15003_001E\", #Total Pop 25+\n                       \"B15003_017E\", #Regular high school diploma\n                       \"B15003_018E\", #GED or alternative credential\n                       \"B15003_019E\", #Some college, less than 1 year\n                       \"B15003_020E\", #Some college, 1 or more years, no degree\n                       \"B15003_021E\", #Associate's degree\n                       \"B15003_022E\", #Bachelor's degree\n                       \"B15003_023E\", #Master's degree\n                       \"B15003_024E\", #Professional school degree\n                       \"B15003_025E\"),  #Doctorate degree \n                     geometry = T, # Do we want this as a shapefile? No, not now.\n                     state = \"PA\", # What state?\n                     county = \"Philadelphia\", # What County?\n                     output = \"wide\") |>\n  rename(#Population\n    tot_pop = B01003_001E,\n    tot_hh = B11001_001E,\n    tot_under_eighteen = B09001_001E,\n    tot_65_and_up = B09021_022E,\n    med_age = B01002_001E, \n    \n    #Race\n    tot_wht_pop = B02001_002E,\n    tot_blk_pop = B02001_003E,\n    tot_native_pop = B02001_004E,\n    tot_other_race = B02001_007E,\n    tot_two_plus_race = B02001_008E,\n    \n    #Ethnicitiy\n    tot_hisp_pop = B01001I_001E,\n    \n     #snap\n    snap_enrollment = B99221_001E,\n    \n    #Housing\n    med_gross_rent = B25064_001E, #Median gross rent\n    owner_occ = B25003_002E, #Owner occupied\n    renter_occ = B25003_003E, #Renter occupied\n    num_resid_units = B25001_001E, #Number of residential units\n    occ_units = B25002_002E, #Occupied\n    vac_units = B25002_003E, #Vacant\n    med_house_value = B25077_001E, #Median house value (dollars)\n    \n    #Income & Work\n    med_hh_inc = B19013_001E, #Median household income\n    inc_below_pov = B17001_002E, #Income in the past 12 months below poverty level:\n    tot_lab_force = B23025_003E, #In labor force:!!Civilian labor force:\n    tot_unempl = B23025_005E, #In labor force:!!Civilian labor force:!!Unemployed\n    \n    #Education\n    tot_pop_25plus = B15003_001E) |> #Total Pop 25+\n  mutate(non_wht_pop = tot_pop - tot_wht_pop,\n         tot_aapi_pop = (B02001_005E + #Tot Asian pop\n                           B02001_006E), #Tot Hawaiian and Pacific Islander pop\n         tot_rent_burden = (B25070_007E + #Rent 30.0 to 34.9 percent\n                              B25070_008E + #Rent 35.0 to 39.9 percent\n                              B25070_009E + #Rent 40.0 to 49.9 percent\n                              B25070_010E), #Rent 50.0 percent or more\n         tot_hs_dip_or_alt = (B15003_017E+ #Regular high school diploma\n                                B15003_018E), #GED or alternative credential\n         tot_some_college = (B15003_019E + #Some college, less than one year\n                               B15003_020E), #Some college, 1 or more years, no degree\n         tot_bach_plus = (B15003_021E +  #Associate's degree\n                            B15003_022E + #Bachelor's degree\n                            B15003_023E + #Master's degree\n                            B15003_024E + #Professional school degree\n                            B15003_025E),  #Doctorate degree \n          tot_no_health_care = (B27010_017E + #under 18\n                                B27010_033E + #19 to 34\n                                B27010_050E + #35 to 64\n                                B27010_066E), #65 and up\n          tot_public_health_care = (B18135_006E + #Estimate!!Total:!!Under 19 years:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                                    B18135_011E + #Estimate!!Total:!!Under 19 years:!!No disability:!!With health insurance coverage:!!With public health coverage\n                                    B18135_017E + #Estimate!!Total:!!19 to 64 years:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                                    B18135_022E + #Estimate!!Total:!!19 to 64 years:!!No disability:!!With health insurance coverage:!!With public health coverage\n                                    B18135_028E + #Estimate!!Total:!!65 years and over:!!With a disability:!!With health insurance coverage:!!With public health coverage\n                                    B18135_033E)) |> #Estimate!!Total:!!65 years and over:!!No disability:!!With health insurance coverage:!!With public health coverage)\n        st_transform(crs = st_crs(crs))\n### clipping to pz\n\n#########################SEPARATE VARIABLES BY TYPE#######################\n\n#Once the 2020 US Census summary file 1 is available, you can insert the population weights code here\n#to more precisely estiamte spatially extensive varibles.\n\n#Extensive variables\nphl_demos_ext = phl_demos |>\n  dplyr::select(tot_pop,\n                tot_hh,\n                tot_under_eighteen,\n                tot_65_and_up,\n                tot_wht_pop,\n                tot_blk_pop,\n                tot_native_pop,\n                tot_other_race,\n                tot_two_plus_race,\n                tot_hisp_pop,\n                owner_occ,\n                renter_occ,\n                num_resid_units,\n                occ_units,\n                vac_units,\n                inc_below_pov,\n                tot_lab_force,\n                tot_unempl,\n                tot_pop_25plus, \n                non_wht_pop,\n                tot_aapi_pop,\n                tot_rent_burden,\n                tot_hs_dip_or_alt,\n                tot_some_college,\n                tot_bach_plus,\n                snap_enrollment,\n                tot_no_health_care,\n                tot_public_health_care)\n\n#Intensive variables\nphl_demos_int = phl_demos |>\n  dplyr::select(med_gross_rent,\n                med_house_value,\n                med_hh_inc,\n                med_age)\n\n######################RUN SPATIAL INTERPOLATION#########################\n\npz_demos_ext = st_interpolate_aw(phl_demos_ext[, 1:28], pz, ext = TRUE)\n\npz_demos_int = st_interpolate_aw(na.omit(phl_demos_int[, 1:4]), pz, ext = FALSE)\n\npz_demos_tot = st_join(pz_demos_ext, pz_demos_int)\n\npz_demos_tot = pz_demos_tot |>\n  mutate(pct_und_18 = (tot_under_eighteen / tot_pop),\n         pct_non_wht_pop = (non_wht_pop / tot_pop),\n         pct_blk = (tot_blk_pop / tot_pop),\n         pct_aapi = (tot_aapi_pop / tot_pop),\n         pct_hisp = (tot_hisp_pop / tot_pop),\n         pct_own_occ = (owner_occ / num_resid_units),\n         pct_rent_occ = (renter_occ / num_resid_units),\n         resid_vac_rate = (vac_units / num_resid_units),\n         pov_rt = (inc_below_pov / tot_pop),\n         unempl_rt = (tot_unempl / tot_lab_force),\n         pct_hs_or_equiv = (tot_hs_dip_or_alt / tot_pop_25plus),\n         pct_some_college = (tot_some_college / tot_pop_25plus),\n         pct_bach_plus = (tot_bach_plus / tot_pop_25plus)\n  )\n\npz_demos_tot = pz_demos_tot |>\n                as.data.frame() |>\n                select(-geometry,\n                       tot_pop,\n                       tot_hh,\n                       tot_under_eighteen,\n                       tot_65_and_up,\n                       tot_wht_pop,\n                       tot_blk_pop,\n                       tot_native_pop,\n                       tot_other_race,\n                       tot_two_plus_race,\n                       tot_hisp_pop,\n                       owner_occ,\n                       renter_occ,\n                       num_resid_units,\n                       occ_units,\n                       vac_units,\n                       inc_below_pov,\n                       tot_lab_force,\n                       tot_unempl,\n                       tot_pop_25plus, \n                       non_wht_pop,\n                       tot_aapi_pop,\n                       tot_rent_burden,\n                       tot_hs_dip_or_alt,\n                       tot_some_college,\n                       snap_enrollment,\n                       tot_no_health_care,\n                       tot_public_health_care,\n                       med_gross_rent,\n                       med_house_value,\n                       med_hh_inc,\n                       med_age,\n                       pct_und_18,\n                       pct_non_wht_pop,\n                       pct_blk,\n                       pct_aapi,\n                       pct_hisp,\n                       pct_own_occ,\n                       pct_rent_occ,\n                       resid_vac_rate,\n                       pov_rt,\n                       unempl_rt,\n                       pct_hs_or_equiv,\n                       pct_some_college,\n                       pct_bach_plus)\n\npz_demos_tot = t(pz_demos_tot)\n\n\n### import illegal dumping\nbase_url = \"https://phl.carto.com/api/v2/sql\"\n\none_year_ago = (lubridate::ymd(Sys.Date()) - lubridate::years(1))\n\nquery = sprintf(\"\n        select *\n        from public_cases_fc\n        where requested_datetime  >= '%s'\n        \", one_year_ago)\n  \ncomplaints = st_as_sf(get_carto(query,\n                              format = 'csv',\n                              base_url = base_url,\n                              stringsAsFactors = FALSE) |>\n                      filter(service_name == \"Illegal Dumping\",\n                             !is.na(lat),\n                             !is.na(lon)),\n                      coords = c(\"lon\", \"lat\"),\n                      crs = st_crs('EPSG:4326')) |>\n                      mutate(requested_datetime = as.Date(requested_datetime),\n                             closed_datetime = as.Date(closed_datetime)) |>\n                      st_transform(crs = st_crs(crs)) # will need these to be projected for KDE later\n\ncomplaints$closed_datetime[complaints$closed_datetime == \"\"] = NA\n\ncomplaints = complaints |>\n                              mutate(response_time_days = case_when(\n                                                                is.na(closed_datetime) ~ as.numeric(difftime(Sys.Date(), requested_datetime, units = \"days\")),\n                                                                TRUE ~ as.numeric(difftime(closed_datetime, requested_datetime, units = \"days\"))\n                                                                  )\n                                                                         )\n\n\n\n\nphl_blocks = st_transform(tracts(\"PA\", \"Philadelphia\"), crs = st_crs(crs))\n\nphl_response_time = complaints |>\n                        select(response_time_days) |>\n                        aggregate(by = phl_blocks, FUN = mean)\n\nall_comps_x_tract = complaints |>\n                        aggregate(by = phl_blocks, FUN = length) |>\n                        select(objectid) |>\n                        rename(count = objectid)\n\nopen_comps_x_tract = complaints |>\n                        filter(status == \"Open\") |>\n                        aggregate(by = phl_blocks, FUN = length) |>\n                        select(objectid) |>\n                        rename(count = objectid)\n\n\nquery2 = sprintf(\"\n        select *\n        from permits\n        where permitissuedate >= '%s'\n        \", one_year_ago)\n  \npermits = st_as_sf(get_carto(query2,\n                              format = 'csv',\n                              base_url = base_url,\n                              stringsAsFactors = FALSE)|>\n                      filter(!is.na(geocode_x),\n                             !is.na(geocode_y)),\n                      coords = c('geocode_x',\n                                 'geocode_y'),\n                      crs = st_crs('EPSG:2272'))\n\n\npz_permits = permits[pz, ]\n\npz_construction_permits = pz_permits |>\n                            filter(permittype %in% c(\"BUILDING\", \"DEMOLITION\", \"RESIDENTIAL BUILDING\"))\n\npz_construction_permits$week = lubridate::week(pz_construction_permits$permitissuedate)\n\npz_construction_permits$permitissuedate = as.Date(pz_construction_permits$permitissuedate)\n\npz_construction_permits$permittype[pz_construction_permits$permittype == \"BUILDING\"] = \"COMMERCIAL\"\n\npz_construction_permits$permittype[pz_construction_permits$permittype == \"RESIDENTIAL BUILDING\"] = \"RESIDENTIAL\"\n\npz_construction_permits$status[pz_construction_permits$status == \"AMENDMENT READY FOR ISSUE\"] = \"AMEND. READY FOR ISSUE\"\n\npz_construction_permits$status[pz_construction_permits$status == \"AMENDMENT REVIEW\"] = \"AMEND. REVIEW\"\n\npz_construction_permits$status[pz_construction_permits$status == \"AMENDMENT APPLICATION INCOMPLETE\"] = \"AMEND. APP. INCOMPLETE\"\n\npz_construction_permits = pz_construction_permits |>\n                            mutate(maj_or_min = case_when(\n                                                          permittype == \"COMMERCIAL\" & typeofwork == \"ADDITION AND/OR ALTERATION\" ~ \"Minor Commercial\",\n                                                          permittype == \"RESIDENTIAL\" & typeofwork == \"ADDITION AND/OR ALTERATION\" ~ \"Minor Residential\",\n                                                          permittype == \"COMMERCIAL\" & typeofwork == \"NEW CONSTRUCTION\" ~ \"Major Commercial\",\n                                                          permittype == \"RESIDENTIAL\" & typeofwork == \"NEW CONSTRUCTION\" ~ \"Major Residential\",\n                                                          typeofwork == \"MINOR DEMOLITION\" ~ \"Minor Demolition\",\n                                                          typeofwork == \"MAJOR DEMOLITION\" ~ \"Major Demolition\"\n                                                        ))\n\npz_construction_permits$maj_or_min = factor(pz_construction_permits$maj_or_min, levels = c(\"Major Commercial\",\n                                                                                            \"Minor Commercial\",\n                                                                                            \"Major Residential\",\n                                                                                            \"Minor Residential\",\n                                                                                            \"Major Demolition\",\n                                                                                            \"Minor Demolition\"))\n\n\n# define variable for six years ago to filter crime down\nsix_years_ago = (lubridate::ymd(Sys.Date()) - lubridate::years(6))\n\n# define SQL query for database\nquery3 = sprintf(\"\n        select dispatch_date_time, text_general_code, point_x, point_y\n        from incidents_part1_part2\n        where dispatch_date_time  >= '%s'\n        \", six_years_ago)\n\n# query crimes\ncrimes = st_as_sf(get_carto(query3,\n                            format = 'csv',\n                            base_url = base_url,\n                            stringsAsFactors = FALSE) |>\n                    filter(!is.na(point_x),\n                           !is.na(point_y)),\n                  coords = c(\"point_x\", \"point_y\"),\n                  crs = st_crs('EPSG:4326')) |>\n  mutate(year = lubridate::year(dispatch_date_time)) |>\n  filter( between (year, 2018, 2022) ) |>\n  st_transform(crs = st_crs(crs)) # project to PA South NAD 1983 US Ft\n\n# pull population estimates\nphl = get_acs(geography = \"tract\", # What is the lowest level of geography are we interested in?\n              year = 2021, # What year do we want - this can also be used for 2000 census data\n              variables = \"B01003_001E\", #Total population\n              geometry = FALSE,\n              state = \"PA\", # What state?\n              county = \"Philadelphia\", # What County?\n              output = \"wide\") \n\nwoodland = phl |>\n  filter(GEOID %in% c('42101006600', '42101006300'))\n\nphl_pop =  sum(phl$B01003_001E)\n\nwoodland_pop = sum(woodland$B01003_001E)\n#------------Clean Data-----------------#\n\n\n### total phl crime\n\nphl_gun_crime = crimes |>\n  filter(text_general_code %in% c('Robbery Firearm', 'Aggravated Assault Firearm')) |>\n  mutate(type = 'Gun')\n\n\nphl_econ_crime = crimes |>\n  filter(grepl('Robbery|Burglary|Theft', text_general_code)) |>\n  mutate(type = 'Econ')\n\n\nphl_drug_crime = crimes |>\n  filter(grepl('Drug', text_general_code)) |>\n  mutate(type = 'Drug')\n\n\n\n### woodland ave specific crime\n\nwoodland_gun_crime = phl_gun_crime[woodland_tracts, ]\n\nwoodland_econ_crime = phl_econ_crime[woodland_tracts, ]\n\nwoodland_drug_crime = phl_drug_crime[woodland_tracts, ]\n\n\nall_woodland_crimes = rbind(woodland_drug_crime, woodland_gun_crime, woodland_econ_crime)\n\n\n### annual phl crime per capita\nannual_phl_gun_crime = phl_gun_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_gun_crime = n) |>\n  mutate(tot_pop = phl_pop,\n         guncrime_per_cap = total_gun_crime / tot_pop,\n         geom = 'Philadelphia')\n\nannual_phl_econ_crime = phl_econ_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_econ_crime = n) |>\n  mutate(tot_pop = phl_pop,\n         econcrime_per_cap = total_econ_crime / tot_pop,\n         geom = 'Philadelphia')\n\nannual_phl_drug_crime = phl_drug_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_drug_crime = n) |>\n  mutate(tot_pop = phl_pop,\n         drugcrime_per_cap = total_drug_crime / tot_pop,\n         geom = 'Philadelphia')\n\n\n\n### annual woodland ave crime per capita\nannual_woodland_gun_crime = woodland_gun_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_gun_crime = n) |>\n  mutate(tot_pop = woodland_pop,\n         guncrime_per_cap = total_gun_crime / tot_pop,\n         geom = 'Woodland')\n\nannual_woodland_econ_crime = woodland_econ_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_econ_crime = n) |>\n  mutate(tot_pop = woodland_pop,\n         econcrime_per_cap = total_econ_crime / tot_pop,\n         geom = 'Woodland')\n\nannual_woodland_drug_crime = woodland_drug_crime |>\n  group_by(year) |>\n  tally() |>\n  rename(total_drug_crime = n) |>\n  mutate(tot_pop = woodland_pop,\n         drugcrime_per_cap = total_drug_crime / tot_pop,\n         geom = 'Woodland')\n\n\n# combine woodland level and phl level crime for comparison\ntot_gun_crime = rbind(annual_woodland_gun_crime, annual_phl_gun_crime)\n\ntot_econ_crime = rbind(annual_woodland_econ_crime, annual_phl_econ_crime)\n\ntot_drug_crime = rbind(annual_woodland_drug_crime, annual_phl_drug_crime)"
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Data Reports for Philly RCOs",
    "section": "Data",
    "text": "Data\n\nDemographics\n\n\nWorkforce & Economy\n\nCommercial Vacancy\n\nActive Commercial Building Permits\n\n\nShow code\nvalueBox(format(nrow(pz_construction_permits |> filter(permittype == \"COMMERCIAL\")), big.mark = \",\"), icon = \"fa-building\", color = \"#3262AB\")\n\n\n146\n\n\n\n\n\n\nCrime\n\n\nShow code\nggplot(all_woodland_crimes) +\n  geom_histogram(aes(x = year, fill = type), alpha = 1, binwidth = 0.6, position = 'dodge') +\n  labs(title = 'Crimes on Woodland Ave',\n       subtitle = '2018 through 2022',\n       fill = \"Type\") +\n  scale_fill_manual(values = c(\n    '#344a2f',\n             '#ffb400',\n             '#886ea9' ))+\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank())\n\n\n\n\n\nShow code\n    ggplot(tot_gun_crime) +\n  geom_col(aes(x = year, y = guncrime_per_cap, fill = geom),  alpha = 0.7, position = 'dodge') +\n  labs(title = 'Gun Crimes on Woodland Ave',\n       subtitle = '2018 through 2022',\n       y = 'Crimes per Capita',\n       x = 'Year',\n       fill = \"Geography\") +\n  scale_fill_manual(values = rev(woodland_palette_light)) +\n  theme_minimal()\n\n\n\n\n\nShow code\n    ggplot(tot_econ_crime) +\n  geom_col(aes(x = year, y = econcrime_per_cap, fill = geom),  alpha = 0.7, position = 'dodge') +\n  labs(title = 'Econ Crimes on Woodland Ave',\n       subtitle = '2018 through 2022',\n       y = 'Crimes per Capita',\n       x = 'Year',\n       fill = \"Geography\") +\n  scale_fill_manual(values = rev(woodland_palette_light)) +\n      theme_minimal()\n\n\n\n\n\nShow code\n    ggplot(tot_drug_crime) +\n  geom_col(aes(x = year, y = drugcrime_per_cap, fill = geom),  alpha = 0.7, position = 'dodge') +\n  labs(title = 'Drug Crimes on Woodland Ave',\n       subtitle = '2018 through 2022',\n       y = 'Crimes per Capita',\n       x = 'Year',\n       fill = \"Geography\") +\n  scale_fill_manual(values = rev(woodland_palette_light)) +\n      theme_minimal()\n\n\n\n\n\n\n\nEducation\n\n\nPublic Health & Environmental Justice\n\nAsthma Rates\n\n\nAir Quality\n\n\nTree Canopy Gap\n\n\nHeat Stress\n\n\n\nHousing\n\n\nActive Residential Building Permits\n\n\nShow code\nvalueBox(format(nrow(pz_construction_permits |> filter(permittype == \"RESIDENTIAL\")), big.mark = \",\"), icon = \"fa-home\", color = \"#41a65c\")\n\n\n62\n\n\n\nActive Demolition Permits\n\n\nShow code\nvalueBox(format(nrow(pz_construction_permits |> filter(permittype == \"DEMOLITION\")), big.mark = \",\"), icon = \"fa-bomb\", color = \"#FF8D7D\")\n\n\n33\n\n\n\n\nBuilding Permits Mapped\n\n\nShow code\ntmap_mode('view')\n\ntm_shape(pz_construction_permits) +\n  tm_dots(title = \"Type of Work\",\n          col = 'maj_or_min',\n          palette = map_pal_plus,\n          alpha = 0.7,\n          size = 0.1,\n          id = \"address\",\n              popup.vars = c(\"Owner\" = \"opa_owner\",\n                             \"Contractor\" = \"contractorname\",\n                             \"Date Issued\" = \"permitissuedate\",\n                             \"Permit Type\" = \"permittype\",\n                             \"Permit Description\" = \"permitdescription\",\n                             \"Type of Work\" = \"typeofwork\",\n                             \"Status\" = \"status\",\n                             \"Applicant Type\" = \"applicanttype\")) +\ntm_shape(pz) +\n  tm_borders() +\ntm_view(set.view = 15,\n        view.legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nBuilding Permits Issued per Week\n\n\nShow code\nggplotly(\n  ggplot(pz_construction_permits, aes(x = permitissuedate, fill = maj_or_min)) +\n  geom_histogram(alpha = 0.7, color = NA, bins = 52) +\n  labs(y = \"Permits Issued\") +\n  facet_grid(maj_or_min ~ .) + #arranges charts in rows instead of side by side\n  theme(legend.position = 'none',\n        axis.title.x = element_blank())+\n  scale_fill_manual(values = map_pal_plus)\n)\n\n\n\n\n\n\n\n\n\nCommunity Assets\n\nPublic Spaces\n\n\nPublic Transit\n\n\n\nQuality of Life\n\nIllegal Dumping\n\nIllegal Dumping Reports by Week\n\n\nShow code\nggplotly(\n  ggplot(complaints, aes(x = requested_datetime)) +\n  geom_histogram(alpha = 0.3, fill = \"#C45B4D\", color = NA, bins = 52)+\n    labs(y = \"Count\") +\n  theme(legend.position = 'bottom',\n        axis.title.x = element_blank())\n    )\n\n\n\n\n\n\n\n\nOpen Cases\nCurrent open illegal dumping cases\n\n\nShow code\ntmap_mode('view')\n\ntm_shape(complaints |> filter(status == \"Open\")) +\n  tm_dots(title = \"Complaints\",\n          col = 'status',\n          palette = status_pal,\n          alpha = 0.2,\n          id = \"address\",\n              popup.vars = c(\"Status\" = \"status\",\n                             \"Date Requested\" = \"requested_datetime\",\n                             \"Date Closed\" = \"closed_datetime\")) +\ntm_view(view.legend.position = c(\"right\", \"bottom\"),\n        set.view = 12)\n\n\n\n\n\n\n\n\n\nOpen Cases by Census Tract\nThe number of current open cases per census tract\n\n\nShow code\ntmap_mode('view')\n\ntm_shape(open_comps_x_tract) +\n  tm_polygons(\n          title = \"Open Cases\",\n          col = 'count',\n          palette = choro_pal,\n          style = \"jenks\",\n          border.col = NA,\n          border.alpha = 0,\n          alpha = 0.7,\n          id = \"address\",\n          textNA = 'NA',\n          popup.vars = c(\"Open Cases\" = 'count')) +\ntm_view(view.legend.position = c(\"right\", \"bottom\"),\n            colorNA = 'transparent',\n        set.view = 12)\n\n\n\n\n\n\n\n\n\nTotal Cases by Census Tract\nThe number of total cases per census tract since June 19th, 2022\n\n\nShow code\ntmap_mode('view')\n\ntm_shape(all_comps_x_tract) +\n  tm_polygons(\n          title = \"Total Cases\",\n          col = 'count',\n          palette = choro_pal,\n          style = \"jenks\",\n          border.col = NA,\n          border.alpha = 0,\n          alpha = 0.7,\n          id = \"address\",\n          textNA = 'NA',\n          popup.vars = c(\"Total Cases\" = 'count')) +\ntm_view(view.legend.position = c(\"right\", \"bottom\"),\n            colorNA = 'transparent',\n        set.view = 12)\n\n\n\n\n\n\n\n\n\nAverage Response Time by Census Tract\nThe average time (in days) for a complaint to be marked “closed” in each census tract\n\n\nShow code\ntmap_mode('view')\n\ntm_shape(phl_response_time) +\n  tm_polygons(\n          title = \"Avg. Response Time (Days)\",\n          col = 'response_time_days',\n          palette = choro_pal,\n          style = \"jenks\",\n          border.col = NA,\n          border.alpha = 0,\n          alpha = 0.7,\n          id = \"address\",\n          textNA = 'NA',\n          popup.vars = c(\"Avg. Response Time (Days)\" = 'response_time_days')) +\ntm_view(view.legend.position = c(\"right\", \"bottom\"),\n            colorNA = 'transparent',\n        set.view = 12)\n\n\n\n\n\n\n\n\n\n\nTraffic Safety"
  },
  {
    "objectID": "index.html#citations-data-sources",
    "href": "index.html#citations-data-sources",
    "title": "Data Reports for Philly RCOs",
    "section": "Citations & Data Sources",
    "text": "Citations & Data Sources"
  }
]